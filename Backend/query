-- Club Module
CREATE TABLE club_user (
    club_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    category VARCHAR(50),
    description TEXT,
    president_name VARCHAR(100),
    vice_president_name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20),
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Club Member
CREATE TABLE club_member (
    member_id INT PRIMARY KEY AUTO_INCREMENT,
    club_id INT,
    name VARCHAR(100) NOT NULL,
    role VARCHAR(50),
    skills_interest TEXT,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20),
    password VARCHAR(255) NOT NULL,
    FOREIGN KEY (club_id) REFERENCES club_user(club_id)
);

-- Club Event
CREATE TABLE club_event (
    event_id INT PRIMARY KEY AUTO_INCREMENT,
    club_id INT,
    creator_id INT,
    event_name VARCHAR(100) NOT NULL,
    event_type VARCHAR(50),
    description TEXT,
    event_banner VARCHAR(255),
    participation_capacity INT,
    registration_last_date DATE,
    event_date DATE,
    event_start_time TIME,
    event_end_time TIME,
    venue VARCHAR(255),
    FOREIGN KEY (club_id) REFERENCES club_user(club_id),
    FOREIGN KEY (creator_id) REFERENCES club_member(member_id)
);

-- Student
CREATE TABLE student (
    student_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50) NOT NULL,
    middle_name VARCHAR(50),
    last_name VARCHAR(50) NOT NULL,
    gender ENUM('Male', 'Female', 'Other'),
    dob DATE,
    phone_number VARCHAR(20),
    address TEXT,
    college_name VARCHAR(100),
    year_of_study INT,
    branch VARCHAR(50),
    course VARCHAR(100),
    interested_in TEXT,
    skills_interest TEXT,
    reason_for_joining_club TEXT,
    previous_club_experience TEXT,
    email VARCHAR(100) UNIQUE,
    password VARCHAR(255) NOT NULL,
    profile_url VARCHAR(255)
);

-- Student Event (Junction table for many-to-many relationship between students and events)
CREATE TABLE student_event (
    club_id INT,
    event_id INT,
    student_id INT,
    PRIMARY KEY (club_id, event_id, student_id),
    FOREIGN KEY (club_id) REFERENCES club_user(club_id),
    FOREIGN KEY (event_id) REFERENCES club_event(event_id),
    FOREIGN KEY (student_id) REFERENCES student(student_id)
);